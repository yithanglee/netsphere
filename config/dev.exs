use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :commerce_front, CommerceFrontWeb.Endpoint,
  http: [port: 4700],
  https: [
    port: 4701,
    cipher_suite: :strong,
    keyfile: "priv/cert/selfsigned_key.pem",
    certfile: "priv/cert/selfsigned.pem"
  ],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: []

config :commerce_front, CommerceFront.Repo,
  username: "postgres",
  password: "postgres",
  database: "#{System.get_env("SNAME")}_prod",
  hostname: System.get_env("HOSTNAME") || "localhost",
  # hostname: "139.162.60.209",
  port: "5432",
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  queue_target: 5_000,
  timeout: 60_000

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :commerce_front, CommerceFrontWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(html|js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/commerce_front/.*(ex)$",
      ~r"lib/commerce_front_web/.*(ex)$",
      ~r"lib/commerce_front_web/templates/.*(eex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :commerce_front, release: :dev
config :commerce_front, url: System.get_env("ENDPOINT")

config :commerce_front, :billplz,
  key: System.get_env("BILLPLZ_API_KEY"),
  endpoint: System.get_env("BILLPLZ_API_ENDPOINT"),
  callback: System.get_env("BILLPLZ_API_CALLBACK_URL")

config :commerce_front, :razer,
  vkey: System.get_env("RAZER_VKEY"),
  mid: System.get_env("RAZER_MID"),
  endpoint: System.get_env("RAZER_ENDPOINT")

config :commerce_front, :nowpayments,
  endpoint: "https://api.nowpayments.io",
  api_key: System.get_env("NOWPAYMENTS_API_KEY"),
  price_currency: "USD", # how you price internally
  callback: System.get_env("NOWPAYMENTS_CALLBACK_URL"),
  success_url: System.get_env("NOWPAYMENTS_SUCCESS_URL"),
  cancel_url: System.get_env("NOWPAYMENTS_CANCEL_URL")



# config :commerce_front, CommerceFront.Mailer, adapter: Bamboo.LocalAdapter
